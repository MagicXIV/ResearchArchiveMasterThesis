---
title: "Descriptive Statistics"
author: "Jasmijn Bazen"
date: "2025-05-15"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Welcome to the Decriptive Statistics R Markdown document. This document contains the code and output for the descriptive statistics of the data. The data is split into a training and test set, and the descriptive statistics are calculated for both sets. The results are visualised using ggplot2.
First, some plots will be made, then the means and standard deviations of some variables will be calculated. The plots will be saved in the Output folder, and the means and standard deviations will be printed in the console.

Please note: the datasets used are the intermediate ones from the `DataCleaning` document, from before the standardisation of the variables. Therefore, they will be splitted up 'again' in this document. 


# Data Visualisation
```{r libraries, include = FALSE}
packages <- c("dplyr", "haven", "tidyr", "tidyverse", "ggplot2", "hrbrthemes", "gridExtra", "grid", "gridExtra")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

invisible(lapply(packages, library, character.only = TRUE))
```
Packages and version numbers used for all 3 scripts combined:
gridExtra_2.3    
hrbrthemes_0.8.7  
lavaanPlot_0.8.1  
lavaan_0.6-19 
lubridate_1.9.3  
forcats_1.0.0  
stringr_1.5.1   
purrr_1.0.2    
readr_2.1.5     
tidyr_1.3.1    
tibble_3.2.1   
tidyverse_2.0.0  
ggplot2_3.5.1   
reshape2_1.4.4  
haven_2.5.4     
dplyr_1.1.4    
MASS_7.3-60.2

### Getting the data ready 
```{r data preparation}
rm(list = ls())
load("../../1.Pre-Processing/IntermediateData/TIMSSdata.RData") #TIMSS data
load("../../1.Pre-Processing/IntermediateData/PISAdata.RData") #PISA data

#remove data object
rm(data)

# Split all 4 datasets up into 2: train and test set
# PISA 
set.seed(123)
samplePISANL <- sample(c(TRUE, FALSE), nrow(dataPISANL), replace=TRUE, prob=c(0.5,0.5))
traindataPISANL  <- dataPISANL[samplePISANL, ]
testdataPISANL   <- dataPISANL[!samplePISANL, ]

set.seed(123)
samplePISAOthers <- sample(c(TRUE, FALSE), nrow(dataPISAOthers), replace=TRUE, prob=c(0.5,0.5))
traindataPISAOthers  <- dataPISAOthers[samplePISAOthers, ]
testdataPISAOthers   <- dataPISAOthers[!samplePISAOthers, ]

# TIMSS
set.seed(123)
sampleTIMSSNL <- sample(c(TRUE, FALSE), nrow(dataTIMSSNL), replace=TRUE, prob=c(0.5,0.5))
traindataTIMSSNL  <- dataTIMSSNL[sampleTIMSSNL, ]
testdataTIMSSNL   <- dataTIMSSNL[!sampleTIMSSNL, ]

set.seed(123)
sampleTIMSSOthers <- sample(c(TRUE, FALSE), nrow(dataTIMSSOthers), replace=TRUE, prob=c(0.5,0.5))
traindataTIMSSOthers  <- dataTIMSSOthers[sampleTIMSSOthers, ]
testdataTIMSSOthers   <- dataTIMSSOthers[!sampleTIMSSOthers, ]

# Combine all test sets into one, making a new variable whichData indicating from which dataset the data comes
testdata <- bind_rows(
  PISANL = testdataPISANL, 
  PISAOthers = testdataPISAOthers, 
  TIMSSNL = testdataTIMSSNL, 
  TIMSSOthers = testdataTIMSSOthers, 
  .id = "whichData"
)

# Combine all train sets into one
traindata <- bind_rows(
  PISANL = traindataPISANL,
  PISAOthers = traindataPISAOthers,
  TIMSSNL = traindataTIMSSNL,
  TIMSSOthers = traindataTIMSSOthers,
  .id = "whichData"
)

traindata$whichData <- as.factor(traindata$whichData)
testdata$whichData <- as.factor(testdata$whichData)

data <- bind_rows(
  traindata %>% mutate(Set = "Train"),
  testdata %>% mutate(Set = "Test")
)
```

### Response Times 
```{r response times}
# Create multi-panel plot with free y-axis scales
#Distribution of Response Time by Group and Set
ResponseTimePlot <- data %>%
  ggplot(aes(x = response_time, fill = Set)) +
  geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
  scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
  facet_wrap(~ whichData, nrow = 2, scales = "free_y") +  # Free y-axis scales
  theme_minimal() +
  labs(x = "Response Time", y = "Count", fill = "Dataset") +
  theme(plot.title = element_text(face = "bold"),  # APA 7: bold title
        strip.text = element_text(face = "bold"))  # Bold facet labels for clarity
ResponseTimePlot
# Save the plot for LaTeX inclusion
ggsave("response_time_histogram.png", ResponseTimePlot, width = 8, height = 6, dpi = 300, path = "../Output/")
```


### Mean Response Times 
```{r mean response times}
# Create multi-panel plot with free y-axis scales
#Distribution of Mean Response Time by Group and Set
MeanResponsePlot <- data %>%
  ggplot(aes(x = mean_response_time, fill = Set)) +
  geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
  scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
  facet_wrap(~ whichData, nrow = 2, scales = "free_y") +  # Free y-axis scales
  theme_minimal() +
  labs(x = "Mean Response Time", y = "Count", fill = "Dataset") +
  theme(plot.title = element_text(face = "bold"),  # APA 7: bold title
        strip.text = element_text(face = "bold"))  # Bold facet labels for clarity
MeanResponsePlot

# Save the plot for LaTeX inclusion
ggsave("mean_response_time_histogram.png", MeanResponsePlot, width = 8, height = 6, dpi = 300, path = "../Output/")
```


### The Proportion of Fast Responses (PFR) (normalisedperc_littletime)
```{r PFR}
# Create multi-panel plot with free y-axis scales
#Distribution of Fast Responses by Group and Set
PFRPlot <- data %>%
  ggplot(aes(x = normalisedperc_littletime, fill = Set)) +
  geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
  scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
  facet_wrap(~ whichData, nrow = 2, scales = "free_y") +  # Free y-axis scales
  theme_minimal() +
  labs(x = "Proportion of Fast Responses", y = "Count", fill = "Dataset") +
  theme(plot.title = element_text(face = "bold"),  # APA 7: bold title
        strip.text = element_text(face = "bold"))  # Bold facet labels for clarity
PFRPlot
# Save the plot for LaTeX inclusion
ggsave("fast_responses_histogram.png", PFRPlot, width = 8, height = 6, dpi = 300, path = "../Output/")
```


### The Proportion of Slow Responses (PSR) (normalisedperc_muchtime)
```{r PSR}
# Create multi-panel plot with free y-axis scales
#Distribution of Slow Responses by Group and Set
PSRPlot <- data %>%
  ggplot(aes(x = normalisedperc_muchtime, fill = Set)) +
  geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
  scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
  facet_wrap(~ whichData, nrow = 2, scales = "free_y") +  # Free y-axis scales
  theme_minimal() +
  labs(x = "Proportion of Slow Responses", y = "Count", fill = "Dataset") +
  theme(plot.title = element_text(face = "bold"),  # APA 7: bold title
        strip.text = element_text(face = "bold"))  # Bold facet labels for clarity
PSRPlot
# Save the plot for LaTeX inclusion
ggsave("slow_responses_histogram.png", PSRPlot, width = 8, height = 6, dpi = 300,  path = "../Output/")
```


### Fast Students
```{r fast students}
# Create barplot 
FastStudentsPlot <- data %>%
  filter(!is.na(many_much_time)) %>%
  group_by(whichData, Set, many_much_time) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(whichData, Set) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ungroup() %>%
  ggplot(aes(x = whichData, y = percentage, fill = interaction(Set, many_much_time))) +
  geom_col(position = "dodge", color = "#e9ecef") +
  scale_fill_manual(values = c("Test.0" = "#69b3a2", "Train.0" = "#404080", 
                              "Test.1" = "#8cedd8", "Train.1" = "#7070db"),
                    labels = c("Test.0" = "Test Not Fast", "Train.0" = "Train Not Fast",
                               "Test.1" = "Test Fast", "Train.1" = "Train Fast"),
                    name = "Dataset and Fast Students") +
  theme_minimal() +
  labs(x = "Group", y = "Percentage (%)") +
  theme(plot.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold"))
FastStudentsPlot
# Save the plot for LaTeX inclusion
ggsave("FastStudents_barplot.png", FastStudentsPlot, width = 8, height = 6, dpi = 300, path = "../Output/")
```

### Slow Students 
```{r slow students}
# Create barplot 
SlowStudentsPlot <- data %>%
  filter(!is.na(many_little_time)) %>%
  group_by(whichData, Set, many_little_time) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(whichData, Set) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ungroup() %>%
  ggplot(aes(x = whichData, y = percentage, fill = interaction(Set, many_little_time))) +
  geom_col(position = "dodge", color = "#e9ecef") +
  scale_fill_manual(values = c("Test.0" = "#69b3a2", "Train.0" = "#404080", 
                              "Test.1" = "#8cedd8", "Train.1" = "#7070db"),
                    labels = c("Test.0" = "Test Not Slow", "Train.0" = "Train Not Slow",
                               "Test.1" = "Test Slow", "Train.1" = "Train Slow"),
                    name = "Dataset and Slow Students") +
  theme_minimal() +
  labs(x = "Group", y = "Percentage (%)") +
  theme(plot.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold"))
SlowStudentsPlot
# Save the plot for LaTeX inclusion
ggsave("SlowStudents_barplot.png", SlowStudentsPlot, width = 8, height = 6, dpi = 300, path = "../Output/")
```


### The Proportion of Unanswered Questions (PUQ)
```{r PUQ}  
# Create multi-panel plot with free y-axis scales
#Distribution of Unanswered Questions by Group and Set
PUQPlot <- data %>%
  filter(whichData %in% c("TIMSSNL", "TIMSSOthers")) %>%
  ggplot(aes(x = normalisedperc_missing_itemscores, fill = Set)) +
  geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
  scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
  facet_wrap(~ whichData, nrow = 1, scales = "free_y") +
  theme_minimal() +
  labs(x = "Proportion of Unanswered Questions", y = "Count", fill = "Dataset") +
  theme(plot.title = element_text(face = "bold"),
        strip.text = element_text(face = "bold"))
PUQPlot
# Save the plot for LaTeX inclusion
ggsave("unanswered_questions_histogram.png", PUQPlot, width = 8, height = 6, dpi = 300, path = "../Output/")
```

### Nativenes 
```{r nativeness}
# Create barplot 
NativePlot <- data %>%
  filter(!is.na(Native)) %>%
  group_by(whichData, Set, Native) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(whichData, Set) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ungroup() %>%
  ggplot(aes(x = whichData, y = percentage, fill = interaction(Set, Native))) +
  geom_col(position = "dodge", color = "#e9ecef") +
  scale_fill_manual(values = c("Test.0" = "#69b3a2", "Train.0" = "#404080", 
                              "Test.1" = "#8cedd8", "Train.1" = "#7070db"),
                    labels = c("Test.0" = "Test Non-Native", "Train.0" = "Train Non-Native",
                               "Test.1" = "Test Native", "Train.1" = "Train Native"),
                    name = "Dataset and Native Status") +
  theme_minimal() +
  labs(x = "Group", y = "Percentage (%)") +
  theme(plot.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold"))
NativePlot
# Save the plot for LaTeX inclusion
ggsave("nativeness_barplot.png", NativePlot, width = 8, height = 6, dpi = 300, 
       path = "../Output/")
```

### Gender
```{r gender}
data <- data %>%
  mutate(gender = as.numeric(as.character(gender)),  # Convert factor to numeric
         gender = ifelse(whichData %in% c("TIMSSNL", "TIMSSOthers"),
                         gender - 1,
                         gender))

# Create barplot 
GenderPlot <- data %>%
  filter(!is.na(gender)) %>%
  group_by(whichData, Set, gender) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(whichData, Set) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ungroup() %>%
  ggplot(aes(x = whichData, y = percentage, fill = interaction(Set, gender))) +
  geom_col(position = "dodge", color = "#e9ecef") +
  scale_fill_manual(values = c("Test.0" = "#69b3a2", "Train.0" = "#404080", 
                              "Test.1" = "#8cedd8", "Train.1" = "#7070db"),
                    labels = c("Test.0" = "Test Female", "Train.0" = "Train Female",
                               "Test.1" = "Test Male", "Train.1" = "Train Male"),
                    name = "Dataset and Gender") +
  theme_minimal() +
  labs(x = "Group", y = "Percentage (%)") +
  theme(plot.title = element_text(face = "bold"),
        legend.title = element_text(face = "bold"))
GenderPlot
# Save the plot for LaTeX inclusion
ggsave("gender_barplot.png", GenderPlot, width = 8, height = 6, dpi = 300, 
       path = "../Output/")
```


### Effort 
```{r Effort}
# Create multi-panel plot with free y-axis scales
#Distribution of Mean Response Time by Group and Set
EffortPlot <- data %>%
  filter(whichData %in% c("PISANL", "PISAOthers")) %>%
  ggplot(aes(x = effort, fill = Set)) +
  geom_histogram(color = "#e9ecef", alpha = 0.6, position = 'identity') +
  scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
  facet_wrap(~ whichData, nrow = 1, scales = "free_y") +  # Free y-axis scales
  theme_minimal() +
  labs(x = "Effort", y = "Count", fill = "Dataset") +
  theme(plot.title = element_text(face = "bold"),  # APA 7: bold title
        strip.text = element_text(face = "bold"))  # Bold facet labels for clarity
EffortPlot

# Save the plot for LaTeX inclusion
ggsave("Effort_histogram.png", EffortPlot, width = 8, height = 6, dpi = 300, 
       path = "../Output/")
```

### PV1-5
```{r PV1-5}
variables <- c("PV1", "PV2", "PV3", "PV4", "PV5")

# Loop through PV1 to PV5 and create histograms if variable exists
for (var in variables) {
  if (var %in% names(data)) {
    plot <- data %>%
      filter(!is.na(.data[[var]])) %>%
      ggplot(aes_string(x = var, fill = "Set")) +
      geom_histogram(color = "#e9ecef", alpha = 0.5, position = 'identity') +
      geom_vline(xintercept = 0, color = "red", linetype = 1, size = 0.5) +
      scale_fill_manual(values = c("Test" = "#69b3a2", "Train" = "#404080")) +
      facet_wrap(~ whichData, nrow = 2, scales = "free_y") +
      theme_minimal() +
      labs(x = paste("Plausible Value", sub("PV", "", var)), y = "Count", fill = "Dataset") +
      theme(plot.title = element_text(face = "bold"),
            strip.text = element_text(face = "bold"))
    
    # Display and save the plot
    print(plot)
    ggsave(paste0(var, "_histogram.png"), plot, width = 8, height = 6, dpi = 300, path = "../Output/")
    message("Histogram created for ", var)
  } else {
    warning("Variable ", var, " not found in data. Skipping plot.")
  }
}
```


## Heatmap Mean Response Times and PV1 per dataset (PISANL, etc)
```{r Heatmap}
# Define heatmaps for each group
# Define heatmaps for each group
heatmapPISANL <- data %>%
  filter(!is.na(PV1), !is.na(mean_response_time), whichData == "PISANL") %>%
  ggplot(aes(x = PV1, y = mean_response_time)) +
  geom_bin2d(bins = 30) +
  scale_fill_gradientn(
    colors = c("#e9ecef", "#69b3a2", "#404080", "#1d3557"),
    name = "Count",
    breaks = function(x) round(seq(0, max(x, na.rm = TRUE), length.out = 4)),
    limits = function(x) c(0, max(x, na.rm = TRUE)),
    labels = function(x) round(x)
  ) +
  theme_minimal() +
  labs(title = NULL) +
  theme(strip.text = element_text(face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

heatmapPISAOthers <- data %>%
  filter(!is.na(PV1), !is.na(mean_response_time), whichData == "PISAOthers") %>%
  ggplot(aes(x = PV1, y = mean_response_time)) +
  geom_bin2d(bins = 30) +
  scale_fill_gradientn(
    colors = c("#e9ecef", "#69b3a2", "#404080", "#1d3557"),
    name = "Count",
    breaks = function(x) round(seq(0, max(x, na.rm = TRUE), length.out = 4)),
    limits = function(x) c(0, max(x, na.rm = TRUE)),
    labels = function(x) round(x)
  ) +
  theme_minimal() +
  labs(title = NULL) +
  theme(strip.text = element_text(face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

heatmapTIMSSNL <- data %>%
  filter(!is.na(PV1), !is.na(mean_response_time), whichData == "TIMSSNL") %>%
  ggplot(aes(x = PV1, y = mean_response_time)) +
  geom_bin2d(bins = 30) +
  scale_fill_gradientn(
    colors = c("#e9ecef", "#69b3a2", "#404080", "#1d3557"),
    name = "Count",
    breaks = function(x) round(seq(0, max(x, na.rm = TRUE), length.out = 4)),
    limits = function(x) c(0, max(x, na.rm = TRUE)),
    labels = function(x) round(x)
  ) +
  theme_minimal() +
  labs(title = NULL) +
  theme(strip.text = element_text(face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

heatmapTIMSSOthers <- data %>%
  filter(!is.na(PV1), !is.na(mean_response_time), whichData == "TIMSSOthers") %>%
  ggplot(aes(x = PV1, y = mean_response_time)) +
  geom_bin2d(bins = 30) +
  scale_fill_gradientn(
    colors = c("#e9ecef", "#69b3a2", "#404080", "#1d3557"),
    name = "Count",
    breaks = function(x) round(seq(0, max(x, na.rm = TRUE), length.out = 4)),
    limits = function(x) c(0, max(x, na.rm = TRUE)),
    labels = function(x) round(x)
  ) +
  theme_minimal() +
  labs(title = NULL) +
  theme(strip.text = element_text(face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

# Check if data is non-empty before plotting
if (nrow(data %>% filter(!is.na(PV1), !is.na(mean_response_time))) > 0) {
  # Arrange heatmaps in a 2x2 grid with facet-like labels
  combined_plot <- arrangeGrob(
    heatmapPISANL + facet_wrap(~ whichData, labeller = labeller(whichData = c("PISANL" = "PISA NL"))),
    heatmapPISAOthers + facet_wrap(~ whichData, labeller = labeller(whichData = c("PISAOthers" = "PISA Others"))),
    heatmapTIMSSNL + facet_wrap(~ whichData, labeller = labeller(whichData = c("TIMSSNL" = "TIMSS NL"))),
    heatmapTIMSSOthers + facet_wrap(~ whichData, labeller = labeller(whichData = c("TIMSSOthers" = "TIMSS Others"))),
    nrow = 2, ncol = 2,
    bottom = textGrob("Plausible Value 1", gp = gpar(fontsize = 12)),
    left = textGrob("Mean Response Time", rot = 90, gp = gpar(fontsize = 12))
  )
  
  # Display the combined plot
  grid.arrange(combined_plot)
  
  # Save the combined plot
  ggsave("pv1_response_time_heatmaps_grid.png", 
         combined_plot,
         width = 10, height = 8, dpi = 300, path = "../Output/")
}
```



# Means & SDs

### Means and SDs of all plausible values (PV1-PV5)
```{r M & SD PV1-PV5}
#Mean & SDs of all plausible values (PV1-PV5)
meanPV <- data %>%
  filter(!is.na(PV1), !is.na(PV2), !is.na(PV3), !is.na(PV4), !is.na(PV5)) %>%
  group_by(whichData, Set) %>%
  summarise(meanPV = mean(c_across(starts_with("PV")), na.rm = TRUE),
            sdPV = sd(c_across(starts_with("PV")), na.rm = TRUE),
            .groups = "drop")
meanPV
```

### Means and SDs of all mean response times
```{r M & SD mean response times}
#Means and SDs of all mean response times
meanRT <- data %>%
  filter(!is.na(mean_response_time)) %>%
  group_by(whichData, Set) %>%
  summarise(meanRT = mean(mean_response_time, na.rm = TRUE),
            sdRT = sd(mean_response_time, na.rm = TRUE),
            .groups = "drop")
meanRT
```

